/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NonceIncreased = ContractEventLog<{
  maker: string;
  newNonce: string;
  0: string;
  1: string;
}>;
export type OrderCanceled = ContractEventLog<{
  maker: string;
  orderHash: string;
  remainingRaw: string;
  0: string;
  1: string;
  2: string;
}>;
export type OrderFilled = ContractEventLog<{
  maker: string;
  orderHash: string;
  remaining: string;
  0: string;
  1: string;
  2: string;
}>;
export type OrderFilledRFQ = ContractEventLog<{
  orderHash: string;
  makingAmount: string;
  0: string;
  1: string;
}>;

export interface SwapAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SwapAbi;
  clone(): SwapAbi;
  methods: {
    DOMAIN_SEPARATOR(): NonPayableTransactionObject<string>;

    LIMIT_ORDER_RFQ_TYPEHASH(): NonPayableTransactionObject<string>;

    LIMIT_ORDER_TYPEHASH(): NonPayableTransactionObject<string>;

    advanceNonce(
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    and(
      targets: string[],
      data: (string | number[])[]
    ): NonPayableTransactionObject<boolean>;

    arbitraryStaticCall(
      target: string,
      data: string | number[]
    ): NonPayableTransactionObject<string>;

    cancelOrder(
      order: [
        number | string | BN,
        string,
        string,
        string,
        string,
        string,
        number | string | BN,
        number | string | BN,
        string | number[],
        string | number[],
        string | number[],
        string | number[],
        string | number[],
        string | number[],
        string | number[]
      ]
    ): NonPayableTransactionObject<void>;

    cancelOrderRFQ(
      orderInfo: number | string | BN
    ): NonPayableTransactionObject<void>;

    checkPredicate(
      order: [
        number | string | BN,
        string,
        string,
        string,
        string,
        string,
        number | string | BN,
        number | string | BN,
        string | number[],
        string | number[],
        string | number[],
        string | number[],
        string | number[],
        string | number[],
        string | number[]
      ]
    ): NonPayableTransactionObject<boolean>;

    doublePrice(
      oracle1: string,
      oracle2: string,
      spread: number | string | BN,
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    eq(
      value: number | string | BN,
      target: string,
      data: string | number[]
    ): NonPayableTransactionObject<boolean>;

    fillOrder(
      order: [
        number | string | BN,
        string,
        string,
        string,
        string,
        string,
        number | string | BN,
        number | string | BN,
        string | number[],
        string | number[],
        string | number[],
        string | number[],
        string | number[],
        string | number[],
        string | number[]
      ],
      signature: string | number[],
      makingAmount: number | string | BN,
      takingAmount: number | string | BN,
      thresholdAmount: number | string | BN
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    fillOrderRFQ(
      order: [
        number | string | BN,
        string,
        string,
        string,
        string,
        number | string | BN,
        number | string | BN
      ],
      signature: string | number[],
      makingAmount: number | string | BN,
      takingAmount: number | string | BN
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    fillOrderRFQTo(
      order: [
        number | string | BN,
        string,
        string,
        string,
        string,
        number | string | BN,
        number | string | BN
      ],
      signature: string | number[],
      makingAmount: number | string | BN,
      takingAmount: number | string | BN,
      target: string
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    fillOrderRFQToWithPermit(
      order: [
        number | string | BN,
        string,
        string,
        string,
        string,
        number | string | BN,
        number | string | BN
      ],
      signature: string | number[],
      makingAmount: number | string | BN,
      takingAmount: number | string | BN,
      target: string,
      permit: string | number[]
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    fillOrderTo(
      order: [
        number | string | BN,
        string,
        string,
        string,
        string,
        string,
        number | string | BN,
        number | string | BN,
        string | number[],
        string | number[],
        string | number[],
        string | number[],
        string | number[],
        string | number[],
        string | number[]
      ],
      signature: string | number[],
      makingAmount: number | string | BN,
      takingAmount: number | string | BN,
      thresholdAmount: number | string | BN,
      target: string
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    fillOrderToWithPermit(
      order: [
        number | string | BN,
        string,
        string,
        string,
        string,
        string,
        number | string | BN,
        number | string | BN,
        string | number[],
        string | number[],
        string | number[],
        string | number[],
        string | number[],
        string | number[],
        string | number[]
      ],
      signature: string | number[],
      makingAmount: number | string | BN,
      takingAmount: number | string | BN,
      thresholdAmount: number | string | BN,
      target: string,
      permit: string | number[]
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    getMakerAmount(
      orderMakerAmount: number | string | BN,
      orderTakerAmount: number | string | BN,
      swapTakerAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    getTakerAmount(
      orderMakerAmount: number | string | BN,
      orderTakerAmount: number | string | BN,
      swapMakerAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    gt(
      value: number | string | BN,
      target: string,
      data: string | number[]
    ): NonPayableTransactionObject<boolean>;

    hashOrder(
      order: [
        number | string | BN,
        string,
        string,
        string,
        string,
        string,
        number | string | BN,
        number | string | BN,
        string | number[],
        string | number[],
        string | number[],
        string | number[],
        string | number[],
        string | number[],
        string | number[]
      ]
    ): NonPayableTransactionObject<string>;

    increaseNonce(): NonPayableTransactionObject<void>;

    invalidatorForOrderRFQ(
      maker: string,
      slot: number | string | BN
    ): NonPayableTransactionObject<string>;

    lt(
      value: number | string | BN,
      target: string,
      data: string | number[]
    ): NonPayableTransactionObject<boolean>;

    nonce(arg0: string): NonPayableTransactionObject<string>;

    nonceEquals(
      makerAddress: string,
      makerNonce: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    or(
      targets: string[],
      data: (string | number[])[]
    ): NonPayableTransactionObject<boolean>;

    remaining(
      orderHash: string | number[]
    ): NonPayableTransactionObject<string>;

    remainingRaw(
      orderHash: string | number[]
    ): NonPayableTransactionObject<string>;

    remainingsRaw(
      orderHashes: (string | number[])[]
    ): NonPayableTransactionObject<string[]>;

    simulateCalls(
      targets: string[],
      data: (string | number[])[]
    ): NonPayableTransactionObject<void>;

    singlePrice(
      oracle: string,
      inverseAndSpread: number | string | BN,
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    timestampBelow(
      time: number | string | BN
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    NonceIncreased(cb?: Callback<NonceIncreased>): EventEmitter;
    NonceIncreased(
      options?: EventOptions,
      cb?: Callback<NonceIncreased>
    ): EventEmitter;

    OrderCanceled(cb?: Callback<OrderCanceled>): EventEmitter;
    OrderCanceled(
      options?: EventOptions,
      cb?: Callback<OrderCanceled>
    ): EventEmitter;

    OrderFilled(cb?: Callback<OrderFilled>): EventEmitter;
    OrderFilled(
      options?: EventOptions,
      cb?: Callback<OrderFilled>
    ): EventEmitter;

    OrderFilledRFQ(cb?: Callback<OrderFilledRFQ>): EventEmitter;
    OrderFilledRFQ(
      options?: EventOptions,
      cb?: Callback<OrderFilledRFQ>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NonceIncreased", cb: Callback<NonceIncreased>): void;
  once(
    event: "NonceIncreased",
    options: EventOptions,
    cb: Callback<NonceIncreased>
  ): void;

  once(event: "OrderCanceled", cb: Callback<OrderCanceled>): void;
  once(
    event: "OrderCanceled",
    options: EventOptions,
    cb: Callback<OrderCanceled>
  ): void;

  once(event: "OrderFilled", cb: Callback<OrderFilled>): void;
  once(
    event: "OrderFilled",
    options: EventOptions,
    cb: Callback<OrderFilled>
  ): void;

  once(event: "OrderFilledRFQ", cb: Callback<OrderFilledRFQ>): void;
  once(
    event: "OrderFilledRFQ",
    options: EventOptions,
    cb: Callback<OrderFilledRFQ>
  ): void;
}
